{"version":3,"sources":["components/Form.js","components/Card.js","container/App.js","serviceWorker.js","index.js"],"names":["Form","onSubmit","this","props","className","type","placeholder","value","onChange","React","Component","Card","src","url","alt","temperatura","hora","Date","getUTCMinutes","condicao","App","state","input","info","handleChange","bind","handleSubmit","event","setState","target","preventDefault","fetch","then","response","json","data","temp","condition","time","icon","imgUrl","Math","round","getUTCHours","undefined","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0OAaeA,G,sLARP,OACI,0BAAMC,SAAUC,KAAKC,MAAMF,SAAUG,UAAU,eAC3C,2BAAOC,KAAK,OAAOC,YAAY,oBAAoBC,MAAOL,KAAKC,MAAMI,MAAOC,SAAUN,KAAKC,MAAMK,SAAUJ,UAAU,eACrH,2BAAOC,KAAK,SAASD,UAAU,eAAeG,MAAM,gB,GALjDE,IAAMC,YCYVC,E,iLAVP,OACI,yBAAKP,UAAU,qBACX,yBAAKQ,IAAKV,KAAKC,MAAMU,IAAKC,IAAI,YAC9B,4BAAKZ,KAAKC,MAAMY,YAAhB,SACA,oCAAUb,KAAKC,MAAMa,KAAK,GAAG,IAAId,KAAKC,MAAMa,KAAKd,KAAKC,MAAMa,KAA5D,KAAmE,IAAIC,MAAOC,gBAAgB,GAAG,KAAI,IAAID,MAAOC,iBAAgB,IAAID,MAAOC,iBAC3I,yCAAehB,KAAKC,MAAMgB,e,GAPvBV,IAAMC,WC0DVU,E,YAvDb,WAAYjB,GAAO,IAAD,8BAChB,4CAAMA,KACDkB,MAAQ,CACXC,MAAO,GACPC,KAAM,IAER,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAPJ,E,0EASPE,GACXzB,KAAK0B,SAAS,CACZN,MAAOK,EAAME,OAAOtB,U,mCAGXoB,GAAQ,IAAD,OAClBA,EAAMG,iBACN,IACMjB,EAAG,4DAAwDX,KAAKmB,MAAMC,MAAnE,kBADM,mCACN,iBACTS,MAAMlB,GACLmB,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACL,EAAKP,UAAS,WACZ,MAAO,CAACL,KAAMY,W,+BAKhB,IAAIC,EAAMC,EAAWC,EAAMC,EAAMC,EAgBjC,OAfGtC,KAAKmB,MAAME,KAAX,OACDa,EAAOK,KAAKC,MAAMxC,KAAKmB,MAAME,KAAX,KAAwBa,OAEzClC,KAAKmB,MAAME,KAAX,UACDc,EAAYnC,KAAKmB,MAAME,KAAX,QAA2B,GAA3B,YACZgB,EAAOrC,KAAKmB,MAAME,KAAX,QAA2B,GAA3B,KACPiB,EAAM,2CAAuCD,EAAvC,YAELrC,KAAKmB,MAAME,KAAX,WACDe,EAAOpC,KAAKmB,MAAME,KAAX,SAA4B,MACnCe,IAAQ,IAAIrB,MAAO0B,eACX,KACNL,GAAQ,KAId,6BACE,wBAAIlC,UAAU,WAAd,sBACA,kBAAC,EAAD,CAAMI,SAAUN,KAAKsB,aAAcjB,MAAOL,KAAKmB,MAAMC,MAAOrB,SAAUC,KAAKwB,oBAChDkB,IAA1B1C,KAAKmB,MAAME,KAAX,KAAoC,kBAAC,EAAD,CAAMV,IAAK2B,EAAQxB,KAAMsB,EAAMvB,YAAaqB,EAAMjB,SAAUkB,IAAa,Q,GAlDhG3B,aCOEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.41167652.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../container/App.scss'\r\n\r\nclass Form extends React.Component{\r\n    render(){\r\n        return (\r\n            <form onSubmit={this.props.onSubmit} className='wrap search'>\r\n                <input type='text' placeholder='Search for a city' value={this.props.value} onChange={this.props.onChange} className='searchTerm' />\r\n                <input type='submit' className='searchButton' value='Search'/>\r\n            </form>\r\n        )\r\n    }\r\n}\r\nexport default Form;","import React from 'react'\r\nimport '../container/App.scss'\r\n\r\nclass Card extends React.Component{\r\n    render(){\r\n        return (\r\n            <div className='weather-card wrap'>\r\n                <img src={this.props.url} alt='current' />\r\n                <h1>{this.props.temperatura}ÂºC</h1>\r\n                <p>Time: {this.props.hora<10?'0'+this.props.hora:this.props.hora}:{new Date().getUTCMinutes()<10?'0'+new Date().getUTCMinutes():new Date().getUTCMinutes()}</p>\r\n                <p>Condition: {this.props.condicao}</p>\r\n            </div>\r\n          );\r\n    }\r\n}\r\nexport default Card","import React, { Component } from 'react';\nimport Form from '../components/Form'\nimport Card from '../components/Card'\nimport './App.scss'\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      input: '',\n      info: {}\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  };\nhandleChange(event) {\n  this.setState({\n    input: event.target.value\n  });\n}\nhandleSubmit(event) {\n  event.preventDefault()\n  const apiKey = '2cd28b4eac4d5462648b276e45206c76'\n  const url = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.input}&appid=${apiKey}&units=metric`\n  fetch(url)\n  .then((response) => {\n    return response.json();\n  })\n  .then((data) => {\n    this.setState(() => {                \n      return {info: data};\n    })\n  });\n}\n  render(){\n    let temp, condition, time, icon, imgUrl;\n    if(this.state.info['main']){\n      temp = Math.round(this.state.info['main'].temp)\n    }\n    if(this.state.info['weather']){\n      condition = this.state.info['weather'][0]['description']\n      icon = this.state.info['weather'][0]['icon']\n      imgUrl = `http://openweathermap.org/img/wn/${icon}@2x.png`\n    }\n    if(this.state.info['timezone']){\n      time = this.state.info['timezone']/3600\n      time += new Date().getUTCHours()\n      if(time>24){\n        time -= 24;\n      }\n    }\n    return (\n  <div>\n    <h1 className=\"heading\">Simple Weather App</h1>\n    <Form onChange={this.handleChange} value={this.state.input} onSubmit={this.handleSubmit}/>\n    {this.state.info['main']!==undefined?<Card url={imgUrl} hora={time} temperatura={temp} condicao={condition}/>:''}\n  </div>\n  );\n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}